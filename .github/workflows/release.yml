on:
  push:
    # branches:
    #   - ci
    tags:
      - 'v*'

name: Release

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    steps:
      - uses: actions/checkout@v3
      - run: cargo test

  release:
    name: Create Release
    needs: test
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Create Release
        id: create_release
        run: |
          upload_url="$(
            curl -L \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              https://api.github.com/repos/${{ github.repository }}/releases \
              -d '{"tag_name":"${{ github.ref_name }}","name":"${{ github.ref_name }}","body":"# ${{ github.ref_name }}","draft":true,"prerelease":false,"generate_release_notes":true}' \
                                                                                                                                | jq --raw-output .upload_url)"
          echo "upload_url=${upload_url/'{?name,label}'/}" >> "$GITHUB_OUTPUT"

  build:
    name: Build Binaries
    needs: release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    steps:
      - uses: actions/checkout@v3
      - run: cargo build --release

      - name: Create and Upload Native macOS Asset
        if: matrix.os == 'macos-latest'
        run: |
          rustup target add aarch64-apple-darwin
          cargo build --release --target aarch64-apple-darwin

          asset=git-together-${GITHUB_REF#refs/*/}-aarch64-apple-darwin.tar.gz
          cd target/aarch64-apple-darwin/release
          tar -zvc git-together > ${{ github.workspace }}/${asset}

          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -H "Content-Type: application/gzip" \
            "${{ needs.release.outputs.upload_url }}?name=${asset}" \
            --data-binary "@${asset}"

      - name: Set Asset Names
        id: vars
        run: |
          triple=$(rustup show active-toolchain | awk '{print $1}')
          echo "windows_asset=git-together-${GITHUB_REF#refs/*/}-${triple}.zip" >> "$GITHUB_OUTPUT"
          echo "non_windows_asset=git-together-${GITHUB_REF#refs/*/}-${triple}.tar.gz" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Create Windows Asset
        if: matrix.os == 'windows-latest'
        run: |
          $SRC_DIR = $pwd.Path
          $STAGE = [System.Guid]::NewGuid().ToString()

          Set-Location $env:TEMP
          New-Item -Type Directory -Name $STAGE
          Set-Location $STAGE

          $ZIP = "$SRC_DIR\${{ steps.vars.outputs.windows_asset }}"

          Copy-Item "$SRC_DIR\target\release\git-together.exe" '.\'

          7z a "$ZIP" *

          Remove-Item *.* -Force
          Set-Location ..
          Remove-Item $STAGE
          Set-Location $SRC_DIR

      - name: Create Non-Windows Asset
        if: matrix.os != 'windows-latest'
        run: |
          tar -zvc git-together > ${{ github.workspace }}/${{ steps.vars.outputs.non_windows_asset }}
        working-directory: target/release

      - name: Upload Windows Release Asset
        if: matrix.os == 'windows-latest'
        run: |
          curl -L `
            -X POST `
            -H "Accept: application/vnd.github+json" `
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" `
            -H "X-GitHub-Api-Version: 2022-11-28" `
            -H "Content-Type: application/zip" `
            "${{ needs.release.outputs.upload_url }}?name=${{ steps.vars.outputs.windows_asset }}" `
            --data-binary "@${{ steps.vars.outputs.windows_asset }}"

      - name: Upload Non-Windows Release Asset
        if: matrix.os != 'windows-latest'
        run: |
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -H "Content-Type: application/gzip" \
            "${{ needs.release.outputs.upload_url }}?name=${{ steps.vars.outputs.non_windows_asset }}" \
            --data-binary "@${{ steps.vars.outputs.non_windows_asset }}"
